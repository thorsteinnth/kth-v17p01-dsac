{"paragraphs":[{"text":"%md\n\n### From Best Effort to Causal Order Reliable Broadcast\n\nThis is the first programming assignment where you will have to build and reuse multiple components. \nStarting bottom-up, you will first have to implement *best effort broadcast*, then *reliable broadcast* and finally *causal order reliable broadcast*.\nMind that passing each component check will give you a **partial** grade (1 point)  and therefore you will need to pass **all** checks to get the full grade (3 points) for this programming assignment.\n\nThis time you simply have to export your notebook when done and just upload it in the \"Programming Exercise 3\" page.\n\n**Things to Remember**:\n1. Some components such as `PerfectLink`,  `Network` and `Timer` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied **before** exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n\nGood luck! :)","dateUpdated":"2017-02-14T12:05:31+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931493_794058785","id":"20160915-144724_1712226433","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>From Best Effort to Causal Order Reliable Broadcast</h3>\n<p>This is the first programming assignment where you will have to build and reuse multiple components.\n<br  />Starting bottom-up, you will first have to implement <em>best effort broadcast</em>, then <em>reliable broadcast</em> and finally <em>causal order reliable broadcast</em>.\n<br  />Mind that passing each component check will give you a <strong>partial</strong> grade (1 point)  and therefore you will need to pass <strong>all</strong> checks to get the full grade (3 points) for this programming assignment.</p>\n<p>This time you simply have to export your notebook when done and just upload it in the &ldquo;Programming Exercise 3&rdquo; page.</p>\n<p><strong>Things to Remember</strong>:</p>\n<ol>\n<li>Some components such as <code>PerfectLink</code>,  <code>Network</code> and <code>Timer</code> are already provided. No need to implement them.</li>\n<li>Execute the imports defined below <strong>before</strong> compiling your component implementations.</li>\n<li>We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.</li>\n<li>You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s\"Process $self delivers message $msg\");</code></li>\n<li>Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.</li>\n<li>Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied <strong>before</strong> exporting and submitting the notebook.</li>\n<li>You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)</li>\n</ol>\n<p>Good luck! :)</p>\n"},"dateCreated":"2017-02-14T12:05:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2110"},{"text":"import se.kth.edx.id2203.core.ExercisePrimitives._\nimport se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl.{Init, _}\nimport se.sics.kompics.{ComponentDefinition => _, Port => _, KompicsEvent}\n\nimport scala.collection.immutable.Set\nimport scala.collection.mutable.ListBuffer","dateUpdated":"2017-02-14T23:55:14+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931493_794058785","id":"20160728-150612_1687562708","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2111","dateFinished":"2017-02-14T23:55:14+0000","dateStarted":"2017-02-14T23:55:14+0000","result":{"code":"SUCCESS","type":"HTML","msg":"import se.kth.edx.id2203.core.ExercisePrimitives._<br />import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl.{Init, _}<br />import se.sics.kompics.{ComponentDefinition=>_, Port=>_, KompicsEvent}<br />import scala.collection.immutable.Set<br />import scala.collection.mutable.ListBuffer<br />"},"focus":true},{"text":"%md\n\n### Part I: Best-Effort Broadcast ###\n\nA Best-Effort Broadcast Abstraction (BEB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class BestEffortBroadcast extends Port {\n     indication[BEB_Deliver];\n     request[BEB_Broadcast];\n    }\n\nA **BEB** component should request `BEB_Broadcast` and indicate `BEB_Deliver` events as defined below:\n\n     case class BEB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n     case class BEB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n\n\nAs you have already learnt from the course lectures, Best-Effort Broadcast should satisfy the following properties:\n\n1. **Validity**:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. **No duplication**: *No message is delivered more than once.*\n3. **No creation**: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n\nHINT: The recommended algorithm to use in this assignment is *Basic Broadcast* and is described in the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/a91e7d1ac75367325c1efd101a9e2138/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/basicbroadcast.pdf) in the respective lecture.\n","dateUpdated":"2017-02-14T12:05:31+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931493_794058785","id":"20160915-145354_1020037731","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part I: Best-Effort Broadcast</h3>\n<p>A Best-Effort Broadcast Abstraction (BEB), in Kompics terms,  is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class BestEffortBroadcast extends Port {\n indication[BEB_Deliver];\n request[BEB_Broadcast];\n}\n</code></pre>\n<p>A <strong>BEB</strong> component should request <code>BEB_Broadcast</code> and indicate <code>BEB_Deliver</code> events as defined below:</p>\n<pre><code> case class BEB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n case class BEB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Best-Effort Broadcast should satisfy the following properties:</p>\n<ol>\n<li><strong>Validity</strong>:  <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n<li><strong>No duplication</strong>: <em>No message is delivered more than once.</em></li>\n<li><strong>No creation</strong>: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Basic Broadcast</em> and is described in the following  <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/a91e7d1ac75367325c1efd101a9e2138/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/basicbroadcast.pdf\">document</a> in the respective lecture.</p>\n"},"dateCreated":"2017-02-14T12:05:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2112"},{"text":"\nclass BasicBroadcast(init: Init[BasicBroadcast]) extends ComponentDefinition {\n\n  //subscriptions\n  val pLink = requires[PerfectLink];\n  val beb = provides[BestEffortBroadcast];\n\n  //configuration\n  val (self, topology) = init match {\n    case Init(s: Address, t: Set[Address]@unchecked) => (s, t)\n  };\n\n  //handlers\n  beb uponEvent {\n    case x: BEB_Broadcast => handle {\n     \n     /* MY CODE HERE  */\n     // This is an outgoing broadcast\n     // i.e. I got a broadcast request from my application (via beb port)\n     // Send message to all known processes (via perfect link)\n      for (p <- topology) {\n        trigger(PL_Send(p, x) -> pLink);\n      }\n     \n    }\n  }\n\n  pLink uponEvent {\n    case PL_Deliver(src, BEB_Broadcast(payload)) => handle {\n     \n     /* MY CODE HERE  */\n     // Got this message from someone else (via perfect link)\n     // Should deliver this message (payload) to my application (via beb port)\n     trigger(BEB_Deliver(src, payload) -> beb);\n     \n    }\n  }\n}","dateUpdated":"2017-02-14T23:55:22+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931494_795213031","id":"20160728-150736_1548510044","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2113","dateFinished":"2017-02-14T23:55:23+0000","dateStarted":"2017-02-14T23:55:22+0000","result":{"code":"SUCCESS","type":"HTML","msg":"defined class BasicBroadcast<br />"},"focus":true},{"text":"checkBEB[BasicBroadcast]();","dateUpdated":"2017-02-14T23:55:26+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931494_795213031","id":"20160830-154208_1529541172","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2114","dateFinished":"2017-02-14T23:55:29+0000","dateStarted":"2017-02-14T23:55:26+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔:  Eventually every correct process delivers every message broadcasted by correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">No Duplication-No Creation</td> <td class=\"tg-6k2t\">✔: Every message delivered has been previously broadcasted<br>✔: No duplicate delivered messages found<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Best Effort Broadcast' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,108,119,102,84,81,90,76,56,121,116,80,111,74,87,69,71,54,54,111,65,72,89,81,81,97,65,51,83,79,120,73,120,88,116,77,77,118,110,54,67,48,79,90,52,10,114,90,56,74,48,52,54,56,66,122,74,65,117,105,67,51,51,108,50,121,90,118,74,105,76,107,89,66,47,80,76,88,122,87,57,119,112,76,101,120,121,117,53,51,70,105,87,66,116,49,51,99,109,81,113,48,78,88,117,99,82,113,103,111,10,99,48,113,66,83,51,87,52,75,121,47,79,106,106,50,106,50,50,81,68,84,56,97,82,108,114,55,97,51,103,50,119,51,110,110,88,115,47,68,71,85,75,122,66,80,49,73,107,75,86,117,105,65,78,87,115,67,71,84,83,50,87,77,76,10,76,104,88,50,67,43,78,103,80,54,83,113,112,51,82,98,89,49,43,82,67,80,88,90,82,106,65,49,72,121,57,101,104,113,84,121,115,97,111,108,76,53,83,73,78,71,80,119,52,71,71,67,76,121,76,68,72,85,105,112,98,56,90,81,10,88,120,52,84,100,109,118,48,78,49,49,65,112,116,74,79,117,80,55,108,76,78,84,90,90,66,86,105,77,47,122,81,97,55,90,56,66,98,100,119,105,99,111,75,116,120,103,113,49,108,77,49,106,117,106,52,49,115,75,72,102,55,84,68,10,69,90,86,65,55,80,71,101,68,84,43,103,67,119,110,84,115,98,79,104,108,71,114,54,118,56,53,66,97,115,102,68,112,88,78,103,101,87,107,84,101,69,82,119,114,116,47,53,55,89,76,51,68,67,106,55,43,104,111,70,87,65,89,113,10,110,77,47,84,114,110,88,70,101,90,117,112,52,56,81,53,55,116,86,110,90,113,47,122,84,83,88,78,72,50,111,48,52,108,51,118,112,118,74,83,102,115,111,71,52,47,119,117,108,76,90,98,88,82,54,50,113,115,70,68,67,67,101,65,10,104,51,119,68,66,119,83,66,115,52,71,107,97,65,81,113,72,103,76,70,119,89,54,53,111,113,104,74,72,82,70,107,77,77,80,48,56,98,110,113,102,89,120,72,122,49,49,102,98,100,100,88,70,87,51,54,122,110,104,116,122,52,116,49,10,49,101,54,83,67,53,98,117,66,76,83,79,70,107,85,121,73,81,113,116,49,87,54,113,87,111,80,106,53,86,111,75,86,47,71,76,55,109,86,70,122,112,84,81,54,49,90,98,77,74,107,86,49,105,98,51,122,52,120,82,85,82,97,51,10,49,107,66,70,65,81,98,66,80,100,122,71,53,101,112,80,99,77,113,50,48,76,52,69,86,83,67,57,101,89,65,65,106,104,90,117,65,80,65,98,76,65,116,74,50,68,114,101,103,107,114,109,102,119,110,57,50,87,117,115,104,77,83,68,10,66,55,51,53,79,82,69,71,89,119,78,118,55,47,43,70,84,85,101,76,57,51,84,107,75,104,65,97,113,50,100,77,90,111,105,99,55,100,56,109,51,115,78,115,82,105,89,105,111,53,71,77,55,79,74,49,81,87,115,82,75,113,118,83,10,119,65,48,66,110,119,71,114,48,75,100,53,106,101,111,72,114,108,56,99,76,120,111,50,121,57,101,66,78,89,117,119,117,86,69,107,80,84,101,65,118,90,65,106,89,114,49,47,48,82,70,120,118,69,72,100,103,53,54,118,98,88,89,76,10,80,54,87,72,119,97,102,114,117,111,105,55,121,112,65,100,83,70,98,52,53,48,80,47,50,107,100,119,50,67,85,69,68,108,101,103,105,106,80,54,71,73,73,84,119,76,89,121,69,110,115,79,56,57,90,88,120,73,80,103,120,104,57,52,10,110,97,103,48,72,50,51,97,55,107,75,43,68,84,97,69,65,56,54,51,50,71,83,67,115,100,82,48,98,118,85,80,75,66,49,87,54,52,111,120,66,122,56,102,111,100,122,102,49,109,80,112,89,51,109,97,71,85,86,105,81,86,103,86,10,97,66,99,81,51,48,89,121,78,119,80,117,76,113,116,88,71,73,66,104,113,80,72,111,56,65,54,84,98,47,77,106,119,116,86,117,82,65,86,89,53,122,97,110,73,119,73,85,82,54,111,103,78,100,52,118,81,88,51,111,48,89,50,79,10,117,67,79,76,52,81,81,81,86,90,51,116,70,70,108,54,121,72,48,75,10,61,50,71,112,122,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />"},"focus":true},{"text":"%md\n\n### Part II: Reliable Broadcast ###\n\nA Reliable Broadcast Abstraction (RB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class ReliableBroadcast extends Port {\n      indication[RB_Deliver];\n      request[RB_Broadcast];\n    }\n    \nAn **RB** component should request `RB_Broadcast` and indicate `RB_Deliver` events, as defined below:\n\n    case class RB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n    case class RB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n       \n\nAs you have already learnt from the course lectures, Reliable Broadcast adds the `Agreement` property into the already existing properties of Best-Effort Broadcast:\n\n1. Validity:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. No duplication: *No message is delivered more than once.*\n3. No creation: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n4. **Agreement**: *If a message m is delivered by some correct process, then m is eventually delivered by every correct process.*\n\nHINT: The recommended algorithm to use in this assignment is *Eager Reliable Broadcast* and is described in page 2 within the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/6c144fd806b3568f6e2c5d7d03e27a29/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/reliablebroadcast.pdf) in the respective lecture.\n\n**Mind that, to complete this part, you will first have to implement and test Best-Effort Broadcast, defined above.**","dateUpdated":"2017-02-14T12:05:31+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931494_795213031","id":"20160915-152029_348185262","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part II: Reliable Broadcast</h3>\n<p>A Reliable Broadcast Abstraction (RB), in Kompics terms,  is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class ReliableBroadcast extends Port {\n  indication[RB_Deliver];\n  request[RB_Broadcast];\n}\n</code></pre>\n<p>An <strong>RB</strong> component should request <code>RB_Broadcast</code> and indicate <code>RB_Deliver</code> events, as defined below:</p>\n<pre><code>case class RB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\ncase class RB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Reliable Broadcast adds the <code>Agreement</code> property into the already existing properties of Best-Effort Broadcast:</p>\n<ol>\n<li>Validity:  <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n<li>No duplication: <em>No message is delivered more than once.</em></li>\n<li>No creation: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n<li><strong>Agreement</strong>: <em>If a message m is delivered by some correct process, then m is eventually delivered by every correct process.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Eager Reliable Broadcast</em> and is described in page 2 within the following  <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/6c144fd806b3568f6e2c5d7d03e27a29/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/reliablebroadcast.pdf\">document</a> in the respective lecture.</p>\n<p><strong>Mind that, to complete this part, you will first have to implement and test Best-Effort Broadcast, defined above.</strong></p>\n"},"dateCreated":"2017-02-14T12:05:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2115"},{"text":"\n//Reliable Broadcast\n\ncase class OriginatedData(src: Address, payload: KompicsEvent) extends KompicsEvent;\n\nclass EagerReliableBroadcast(init: Init[EagerReliableBroadcast]) extends ComponentDefinition {\n  \n  //EagerReliableBroadcast Subscriptions\n  val beb = requires[BestEffortBroadcast];\n  val rb = provides[ReliableBroadcast];\n\n  //EagerReliableBroadcast Component State and Initialization\n  val self = init match {\n    case Init(s: Address) => s\n  };\n  val delivered = collection.mutable.Set[KompicsEvent]();\n\n  //EagerReliableBroadcast Event Handlers\n  rb uponEvent {\n    case x@RB_Broadcast(payload) => handle {\n     \n     /* MY CODE HERE  */\n     // Am getting a request for a broadcast from my application\n     // (i.e. the request for broadcast is coming into the rb (reliable broadcast) component)\n     // Let's forward the request to the best effort broadcast (beb) component, i.e. use that to broadcast the message\n     // Wrapping the message from my application in an OriginatedData case class containing info that I am the one sending this\n     trigger(BEB_Broadcast(OriginatedData(self, payload)) -> beb);\n     \n    }\n  }\n\n  beb uponEvent {\n    case BEB_Deliver(_, data@OriginatedData(origin, payload)) => handle {\n     \n     /* MY CODE HERE  */\n     // Am getting an incoming message from by beb component, being delivered to this component (rb)\n     // Let's check if I have already delivered this message (avoid duplicates)\n     // If not, mark the message as delivered, deliver it from the rb component (to the application then)\n     // and (eagerly) broadcast it again to all others using my beb component\n     \n     // The incoming message is data is OriginatedData, which extends CompicsEvent, and contains info on the original sender\n     // But, we track what payloads we have delivered only (i.e. not the OriginatedData objects)\n     if (!delivered.contains(payload)) \n     {\n         // Add the received payload to the delivered set\n         delivered add payload;\n         \n         // Deliver the payload from the rb component (to the application)\n         trigger(RB_Deliver(origin, payload) -> rb);\n         \n         // Broadcast again (eagerly) using beb component\n         trigger(BEB_Broadcast(data) -> beb);\n         \n     }\n     \n    }\n  }\n}","dateUpdated":"2017-02-14T23:55:35+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931494_795213031","id":"20160728-150932_1018155040","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2116","dateFinished":"2017-02-14T23:55:35+0000","dateStarted":"2017-02-14T23:55:35+0000","result":{"code":"SUCCESS","type":"HTML","msg":"defined class OriginatedData<br />defined class EagerReliableBroadcast<br />"},"focus":true},{"text":"checkRB[BasicBroadcast,EagerReliableBroadcast]();","dateUpdated":"2017-02-14T23:55:51+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931494_795213031","id":"20160830-154553_1603284544","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2117","dateFinished":"2017-02-14T23:55:54+0000","dateStarted":"2017-02-14T23:55:51+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔:  Eventually every correct process delivers every message broadcasted by correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">No Duplication-No Creation</td> <td class=\"tg-6k2t\">✔: Every message delivered has been previously broadcasted<br>✔: No duplicate delivered messages found<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Agreement</td> <td class=\"tg-6k2t\">✔: Every message delivered by a correct process is eventually delivered by every other correct process<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Reliable Broadcast' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,81,47,43,80,107,56,54,105,48,69,121,111,69,89,83,53,88,110,78,71,72,72,74,116,78,104,48,87,52,57,81,76,87,116,115,52,97,80,76,112,47,101,113,50,121,100,56,10,119,71,100,56,43,79,71,109,57,72,85,84,122,67,53,85,102,84,113,100,73,97,65,79,43,107,75,106,97,107,82,86,106,98,50,78,89,53,80,105,81,113,50,80,53,90,66,72,71,115,78,76,111,104,52,56,74,103,113,86,83,43,100,114,10,115,87,48,78,121,75,47,90,109,118,121,116,77,117,98,84,57,97,49,67,103,89,90,65,107,49,99,54,68,118,85,55,51,113,72,52,120,103,74,76,51,84,121,47,57,90,121,49,57,112,55,87,109,118,78,119,109,85,115,67,85,77,115,107,10,84,43,101,49,53,53,90,54,54,75,109,106,120,115,67,107,54,53,101,112,47,101,118,69,47,109,98,67,84,103,102,101,106,106,87,67,112,54,80,114,110,71,84,65,65,81,52,65,111,66,74,43,66,98,121,83,75,49,119,103,104,83,113,106,10,110,100,102,53,115,70,49,65,77,122,111,66,104,86,66,76,113,90,78,48,85,100,103,115,74,43,57,65,97,69,57,108,120,86,85,75,80,120,85,65,77,56,113,101,105,110,117,107,103,83,71,74,114,84,47,113,77,88,107,118,87,106,118,122,10,53,114,43,117,101,106,120,115,56,47,72,115,80,69,114,107,51,120,65,112,102,82,68,106,66,121,105,79,101,80,120,69,47,51,108,112,108,103,75,79,81,100,115,105,103,48,76,110,56,84,65,49,57,43,112,82,70,88,115,105,87,90,77,69,10,70,65,118,71,80,53,79,51,56,97,121,87,43,75,79,86,55,118,83,73,110,121,112,97,89,88,67,121,72,83,102,105,53,69,119,110,119,117,97,75,101,82,118,122,89,113,54,83,87,79,68,67,103,52,75,49,117,65,98,122,71,107,100,51,10,77,82,53,99,83,75,116,56,103,117,116,51,49,51,71,110,112,102,83,99,78,103,85,73,49,110,74,113,47,83,111,48,106,48,80,73,77,75,101,54,48,56,54,104,88,89,87,74,78,110,74,73,113,74,67,76,53,100,49,55,49,103,111,109,10,109,85,102,120,102,117,117,51,100,121,112,56,117,119,104,101,55,97,122,65,52,111,101,85,65,83,81,79,108,100,104,99,90,47,111,74,119,105,55,75,74,51,47,83,83,72,118,118,117,52,54,66,48,54,98,71,77,72,69,102,105,114,122,53,10,80,49,99,47,89,52,69,107,100,105,116,113,67,56,120,75,107,89,100,105,78,43,70,108,55,72,72,53,68,69,104,69,56,105,99,57,86,76,112,76,116,107,103,105,107,119,103,67,89,103,98,48,121,110,70,82,83,118,109,47,97,78,52,48,10,77,85,53,50,55,56,106,56,113,103,116,88,99,43,111,104,105,105,104,89,76,83,107,119,84,79,57,108,49,69,74,112,69,89,53,82,121,67,81,88,68,90,73,82,100,122,100,73,66,68,51,111,57,70,116,106,99,119,71,65,90,87,114,83,10,119,67,111,66,51,98,111,112,53,66,69,109,88,118,121,71,73,77,105,83,79,117,117,108,80,52,99,104,114,43,99,98,77,55,101,75,122,111,72,68,68,78,65,113,69,88,85,56,67,76,67,107,112,111,101,102,74,73,119,68,102,117,120,67,10,110,113,111,72,72,105,70,114,87,53,74,106,87,90,73,48,65,109,65,103,54,74,82,101,121,85,87,66,71,48,111,75,109,99,86,118,116,98,111,70,57,81,75,89,110,79,51,99,90,88,55,101,97,74,84,111,55,110,69,66,106,76,83,71,10,120,117,81,99,88,68,53,112,77,105,97,80,105,51,114,86,81,69,49,51,76,49,76,113,55,102,71,70,66,53,74,112,113,75,89,43,47,86,86,74,54,48,121,120,119,72,79,119,50,69,71,73,115,81,67,90,103,113,75,70,55,81,84,56,10,86,72,48,85,112,98,65,54,76,67,111,112,122,53,97,118,101,49,120,105,56,57,110,106,105,88,119,111,111,87,49,84,108,66,72,111,90,55,113,89,110,114,102,114,110,53,110,117,73,51,117,43,55,118,118,109,57,120,85,107,81,84,82,111,10,72,86,105,52,121,66,78,116,73,78,76,51,52,110,78,101,52,114,71,114,66,67,72,68,97,51,112,115,100,51,50,74,81,100,110,77,120,106,101,56,54,53,65,57,78,73,67,105,76,53,75,47,118,107,43,75,90,50,107,61,10,61,82,52,119,101,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />"},"focus":true},{"text":"%md\n\n### Part III: Causal-Order Reliable Broadcast ###\n\nA Causal-Order Reliable Broadcast Abstraction (CRB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class CausalOrderReliableBroadcast extends Port {\n      indication[CRB_Deliver];\n      request[CRB_Broadcast];\n    }\n       \nA **CRB** component should request `CRB_Broadcast` and indicate `CRB_Deliver` events, as defined below:\n\n    case class CRB_Deliver(src: Address, payload: KompicsEvent) extends KompicsEvent;\n    case class CRB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n\n\nAs you have already learnt from the course lectures, Causal-Order Reliable Broadcast adds the `Causal Delivery` property into the already existing properties of Reliable and Best-Effort Broadcast:\n\n1. Validity:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. No duplication: *No message is delivered more than once.*\n3. No creation: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n4. Agreement: *If a message m is delivered by some correct process, then m is eventually delivered by every correct process.*\n5. **Causal delivery**: *For any message m1 that potentially caused a message m2, i.e., m1 → m2, no process delivers m2 unless it has already delivered m1.*\n\nHINT: The recommended algorithm to use in this assignment is *Waiting Causal Broadcast* and is described in page 4 within the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/f11d45d4cb0d9685c723dd00de427b8d/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/causalbroadcast.pdf) in the respective lecture.\n\n**Also mind, that to complete this part, you will first have to implement and test Best-Effort Broadcast and Reliable Broadcast, defined above.**\n\n\n####Working with Vector Clocks####\nWe have already provided you a `VectorClock` data structure **(already imported)** to aid you with the algorithm implementation. You can briefly see the supported operations below:\n\n```scala\n    case class VectorClock(var vc: Map[Address, Int]) {\n        def inc(addr: Address) : Unit  //increases the clock corresponding to the address @addr provided\n        def set(addr: Address, value: Int) : Unit //sets the clock of @addr to @value\n        def <=(that: VectorClock): Boolean   //returns true if this vector clock instance is lower or equal to @that\n    }\n    object VectorClock {\n        def empty(topology: scala.Seq[Address]): VectorClock //generates a vector clock that has an initial clock value of 0 for each address in the @topology provided\n        def apply(that: VectorClock): VectorClock //copy constructor of a vector clock. E.g. if vc1 is a vector clock vc2 = VectorClock(vc1) is a copy of vc1\n    }\n```\nIn case you want to check the full implementation of the VectorClock, you can find it in our full published gist [here](https://gist.github.com/senorcarbone/5c960ee27a67ec8b6bd42c33303fdcd2).\n","dateUpdated":"2017-02-14T12:05:31+0000","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":true,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931495_794828283","id":"20160915-154115_478906095","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part III: Causal-Order Reliable Broadcast</h3>\n<p>A Causal-Order Reliable Broadcast Abstraction (CRB), in Kompics terms,  is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class CausalOrderReliableBroadcast extends Port {\n  indication[CRB_Deliver];\n  request[CRB_Broadcast];\n}\n</code></pre>\n<p>A <strong>CRB</strong> component should request <code>CRB_Broadcast</code> and indicate <code>CRB_Deliver</code> events, as defined below:</p>\n<pre><code>case class CRB_Deliver(src: Address, payload: KompicsEvent) extends KompicsEvent;\ncase class CRB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Causal-Order Reliable Broadcast adds the <code>Causal Delivery</code> property into the already existing properties of Reliable and Best-Effort Broadcast:</p>\n<ol>\n<li>Validity:  <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n<li>No duplication: <em>No message is delivered more than once.</em></li>\n<li>No creation: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n<li>Agreement: <em>If a message m is delivered by some correct process, then m is eventually delivered by every correct process.</em></li>\n<li><strong>Causal delivery</strong>: <em>For any message m1 that potentially caused a message m2, i.e., m1 → m2, no process delivers m2 unless it has already delivered m1.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Waiting Causal Broadcast</em> and is described in page 4 within the following  <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/f11d45d4cb0d9685c723dd00de427b8d/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/causalbroadcast.pdf\">document</a> in the respective lecture.</p>\n<p><strong>Also mind, that to complete this part, you will first have to implement and test Best-Effort Broadcast and Reliable Broadcast, defined above.</strong></p>\n<h4>Working with Vector Clocks</h4>\n<p>We have already provided you a <code>VectorClock</code> data structure <strong>(already imported)</strong> to aid you with the algorithm implementation. You can briefly see the supported operations below:</p>\n<pre><code class=\"scala\">    case class VectorClock(var vc: Map[Address, Int]) {\n        def inc(addr: Address) : Unit  //increases the clock corresponding to the address @addr provided\n        def set(addr: Address, value: Int) : Unit //sets the clock of @addr to @value\n        def &lt;=(that: VectorClock): Boolean   //returns true if this vector clock instance is lower or equal to @that\n    }\n    object VectorClock {\n        def empty(topology: scala.Seq[Address]): VectorClock //generates a vector clock that has an initial clock value of 0 for each address in the @topology provided\n        def apply(that: VectorClock): VectorClock //copy constructor of a vector clock. E.g. if vc1 is a vector clock vc2 = VectorClock(vc1) is a copy of vc1\n    }\n</code></pre>\n<p>In case you want to check the full implementation of the VectorClock, you can find it in our full published gist <a href=\"https://gist.github.com/senorcarbone/5c960ee27a67ec8b6bd42c33303fdcd2\">here</a>.</p>\n"},"dateCreated":"2017-02-14T12:05:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2118"},{"text":"\n\n//Causal Reliable Broadcast\n\ncase class DataMessage(timestamp: VectorClock, payload: KompicsEvent) extends KompicsEvent;\n\nclass WaitingCRB(init: Init[WaitingCRB]) extends ComponentDefinition {\n\n  //subscriptions\n  val rb = requires[ReliableBroadcast];\n  val crb = provides[CausalOrderReliableBroadcast];\n\n  //configuration\n  val (self, vec) = init match {\n    case Init(s: Address, t: Set[Address]@unchecked) => (s, VectorClock.empty(t.toSeq))\n  };\n\n  //state\n  var pending: ListBuffer[(Address, DataMessage)] = ListBuffer();\n  var lsn = 0;\n\n  //handlers\n  crb uponEvent {\n    case x: CRB_Broadcast => handle {\n     \n     /* MY CODE HERE */\n     // Want to CRB broadcast a message\n     //println(s\"CRB broadcast. Self: $self\");\n\n     // Create a new vector clock, same as my current vector clock\n     var newVec = VectorClock.apply(vec); \n     // Set my entry in the new vector clock as my current sequence number\n     newVec.set(self, lsn);\n     // Increment my sequence number\n     lsn = lsn + 1;\n     // Reliably broadcast the vector clock + payload, wrapped in a DataMessage\n     trigger(RB_Broadcast(DataMessage(newVec, x.payload)) -> rb);\n     \n    }\n  }\n\n  rb uponEvent {\n    case x@RB_Deliver(src: Address, msg: DataMessage) => handle {\n     \n     /* MY CODE HERE */\n     // Just received a message from the rb component (layer below me)\n     //println(s\"RB deliver. Self: $self\");\n     \n     // Add it to the pending set\n     // https://stackoverflow.com/questions/26606986/scala-add-a-tuple-to-listbuffer\n     val newPendingEntry = (src, msg);\n     pending += newPendingEntry;\n     \n     // Have to figure out what messages it is safe to deliver up to the next layer\n     // (without breaking causal dependency)\n     // While there exists an entry in the pending set where the pending vector clock is less than or equal to my current vector clock\n     // it is safe to remove that entry from the pending set, increment my own vector clock entry for the sender of that pending entry\n     // and deliver that pending message to the application.\n     // I know that I have seen all causally preceding (happened before) messages for that pending entry when my vector clock is larger\n     // or equal to the pending entry's vector clock.\n     \n     // Let's sort the pending list.\n     // Can't just for-each through it ... would then have to do it again and again until I find no \n     // elements safe to deliver (since I might say that element x is not safe, but element x+1 is safe, in turn making element x safe\n     // would then have to go through this again, now realizing that element x is safe)\n     // If I sort the list by vector clock I can just do a while/for loop on it\n\n     // Accessing second element in tuple and sorting by the timestamp property on that\n     pending = pending.sortWith(_._2.timestamp <= _._2.timestamp);\n     \n     // List to keep track of messages safe to deliver\n     var safe: ListBuffer[(Address, DataMessage)] = ListBuffer();\n     \n     // Loop through pending set, until we reach an element that isn't safe\n     // Since the list is sorted by vector time stamp, we know all following elements will also be unsafe\n     var i = 0;\n     while (i < pending.size && pending(i)._2.timestamp <= vec)\n     {\n         // This is a safe message, add it to our safe list\n         safe += pending(i);\n         \n         // Increase my vector clock entry for this sender \n         vec.inc(pending(i)._1);\n         \n         // Deliver the message\n         trigger(CRB_Deliver(pending(i)._1, pending(i)._2.payload) -> crb);\n         \n         // Increment index for next while loop\n         i = i + 1;\n     }\n     \n     // Remove safe messages from the pending set\n     pending = pending.diff(safe);\n    \n    }\n  }\n}\n","dateUpdated":"2017-02-14T23:56:00+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12,"lineNumbers":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931495_794828283","id":"20160728-150719_1155234225","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2119","dateFinished":"2017-02-14T23:56:01+0000","dateStarted":"2017-02-14T23:56:00+0000","result":{"code":"SUCCESS","type":"HTML","msg":"defined class DataMessage<br />defined class WaitingCRB<br />"},"focus":true},{"text":"checkCRB[BasicBroadcast, EagerReliableBroadcast, WaitingCRB]();","dateUpdated":"2017-02-14T23:56:12+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931495_794828283","id":"20160728-150824_64351046","dateCreated":"2017-02-14T12:05:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2120","dateFinished":"2017-02-14T23:56:14+0000","dateStarted":"2017-02-14T23:56:12+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔:  Eventually every correct process delivers every message broadcasted by correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">No Duplication-No Creation</td> <td class=\"tg-6k2t\">✔: Every message delivered has been previously broadcasted<br>✔: No duplicate delivered messages found<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Agreement</td> <td class=\"tg-6k2t\">✔: Every message delivered by a correct process is eventually delivered by every other correct process<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Causal Delivery</td> <td class=\"tg-6k2t\">✔: All messages delivered respect causality order<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Causal Order Reliable Broadcast' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,120,103,43,88,104,116,50,80,56,89,56,53,71,68,112,122,100,107,103,43,121,68,84,83,70,53,52,43,113,88,55,115,112,77,50,120,78,81,52,113,117,69,78,103,10,77,113,122,83,120,86,79,116,101,69,107,97,77,67,100,102,52,98,99,101,111,109,72,72,68,121,48,104,50,78,47,57,50,101,57,69,110,56,108,111,105,68,81,78,100,99,52,119,76,51,107,50,83,115,119,111,120,98,48,102,90,47,72,77,10,100,48,107,117,97,98,108,73,84,111,78,89,110,83,84,80,67,86,75,55,109,119,52,82,110,55,121,53,119,43,88,74,48,117,49,118,110,83,49,68,54,97,86,66,90,102,90,67,111,78,51,88,110,79,54,110,83,107,105,88,87,83,55,107,10,90,47,74,71,117,84,52,76,106,108,51,75,71,74,88,74,104,106,77,66,53,114,43,54,107,82,114,56,104,73,90,53,75,53,87,73,83,79,78,48,117,65,86,105,85,108,81,86,85,90,107,51,55,90,49,68,71,121,103,54,90,105,100,113,10,48,49,110,89,79,116,81,104,49,118,106,83,101,122,68,80,68,53,115,107,57,108,116,114,97,116,115,79,117,97,102,66,107,81,57,50,73,50,73,55,71,52,87,52,113,99,51,52,66,104,86,90,102,65,100,109,108,120,76,43,109,85,66,98,10,83,101,110,43,53,113,113,51,49,86,54,113,66,85,78,87,55,104,50,113,113,107,119,121,111,88,115,90,71,107,80,100,53,109,52,100,85,105,78,52,89,120,98,76,78,76,70,73,69,74,114,47,76,121,109,53,106,77,101,97,82,75,85,57,10,112,67,51,86,90,85,121,69,54,99,55,100,112,79,118,110,89,53,86,116,116,81,57,110,87,79,117,97,71,52,72,76,108,57,70,75,67,99,120,43,85,48,53,122,71,81,72,85,108,65,71,85,106,115,101,118,89,104,112,120,78,55,89,72,10,47,115,68,67,50,85,114,84,101,104,65,114,98,56,82,55,97,90,54,74,105,82,116,43,111,108,86,89,111,71,43,115,111,85,79,66,88,79,49,89,116,103,66,48,74,69,76,73,87,83,68,83,70,79,53,87,119,108,75,73,110,70,102,102,10,100,76,117,68,75,105,114,54,55,78,82,107,71,56,85,47,107,104,117,114,65,43,89,49,88,118,47,84,84,65,52,82,50,49,50,79,88,102,98,117,72,51,89,82,69,97,47,76,112,83,103,53,121,90,89,107,68,122,48,49,102,85,72,72,10,73,49,78,118,53,108,78,118,109,102,70,88,80,82,78,120,80,112,49,66,81,97,106,56,84,74,53,86,102,73,82,72,48,57,72,71,99,47,106,54,68,122,113,67,79,69,76,86,114,106,113,90,108,65,76,67,48,75,74,109,83,116,105,88,10,82,80,122,74,71,71,100,110,99,113,115,106,53,115,121,68,106,117,77,87,104,115,48,81,66,54,77,81,49,112,70,115,75,86,110,119,56,114,117,83,102,106,120,105,100,80,118,69,116,53,80,56,53,54,117,118,83,69,108,122,101,56,84,83,10,119,70,52,66,54,106,97,81,103,81,78,79,82,81,47,71,82,103,122,86,51,106,79,54,109,75,49,82,77,76,118,67,83,72,48,106,108,82,117,110,68,97,122,49,69,65,52,55,49,103,74,68,79,114,49,74,101,54,72,104,108,54,66,82,10,80,85,72,55,54,113,104,101,88,80,53,80,56,114,111,119,52,67,113,83,99,97,118,73,54,72,52,103,49,69,116,67,100,87,98,108,99,109,79,107,65,74,120,83,77,65,56,51,114,57,120,53,68,103,79,100,73,83,75,108,68,103,106,72,10,65,107,97,90,54,116,77,52,67,98,101,80,51,76,70,120,86,52,57,50,86,120,66,54,47,109,107,98,103,87,83,55,56,102,105,51,80,43,116,104,56,74,79,106,121,113,115,97,114,102,112,86,113,87,74,115,79,120,66,107,51,68,110,48,10,116,79,106,66,111,54,65,77,43,56,119,112,52,105,120,122,112,82,68,43,121,115,73,51,80,79,53,81,112,107,47,57,48,109,67,75,108,75,70,57,112,53,114,76,117,114,48,88,51,102,111,80,110,98,78,101,81,98,52,57,118,77,121,56,10,110,88,111,103,43,50,114,51,43,68,49,57,90,100,113,56,90,114,76,53,97,65,51,75,112,98,112,78,84,72,47,48,98,119,98,115,109,90,48,121,52,106,84,68,102,67,79,78,55,55,97,112,47,114,69,90,122,54,99,99,66,80,47,117,10,43,86,118,53,102,102,76,115,73,74,43,111,72,55,86,114,118,79,120,51,70,80,118,80,74,43,104,73,73,76,86,48,99,116,74,120,82,72,75,80,55,48,112,52,54,119,111,83,118,85,47,57,117,74,69,84,85,110,122,104,53,110,84,83,10,61,54,109,76,48,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />"},"focus":true},{"dateUpdated":"2017-02-14T12:05:31+0000","config":{"enabled":true,"tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","editorHide":false,"colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1487073931495_794828283","id":"20160830-154726_1125271335","dateCreated":"2017-02-14T12:05:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2121"}],"name":"Exercise: Broadcast Abstractions","id":"2C8JPYDTH","angularObjects":{"2BKQCVH92:shared_process":[],"2BMXUXUJ6:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}